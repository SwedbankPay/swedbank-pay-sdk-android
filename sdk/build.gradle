apply plugin: 'com.android.library'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-parcelize'

apply plugin: 'org.jetbrains.dokka'

apply plugin: 'maven-publish'

apply plugin: 'signing'

android {
    compileSdkVersion 30
    defaultConfig {
        minSdkVersion 21 // Required by okhttp (from version 3.13 onwards)
        targetSdkVersion 30
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'proguard-rules.pro'
        buildConfigField('String', 'SDK_VERSION', "\"$version\"")
    }
    sourceSets {
        def testCommon = 'src/testCommon/java'
        test {
            java.srcDir testCommon
        }
        androidTest {
            java.srcDir testCommon
        }
    }
    testOptions {
        unitTests.includeAndroidResources = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    useLibrary 'android.test.runner'
    useLibrary 'android.test.base'
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    def coroutines_version = '1.5.1'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'androidx.core:core-ktx:1.5.0'

    def fragment_version = '1.3.6'
    implementation "androidx.fragment:fragment-ktx:$fragment_version"
    debugImplementation "androidx.fragment:fragment-testing:$fragment_version"

    def lifecycle_version = '2.3.1'
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"

    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    implementation 'androidx.coordinatorlayout:coordinatorlayout:1.1.0'
    implementation 'com.google.android.material:material:1.4.0'

    implementation 'com.google.android.gms:play-services-base:17.6.0'
    implementation 'com.google.android.gms:play-services-basement:17.6.0'

    def okhttp_version = '4.9.1'
    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"
    testImplementation "com.squareup.okhttp3:mockwebserver:$okhttp_version"
    androidTestImplementation "com.squareup.okhttp3:mockwebserver:$okhttp_version"

    implementation 'com.google.code.gson:gson:2.8.7'

    compileOnly 'joda-time:joda-time:2.10.10'
    compileOnly 'org.threeten:threetenbp:1.5.1'

    def androidx_test_version = '1.3.0'
    testImplementation "androidx.test:core:$androidx_test_version"
    androidTestImplementation "androidx.test:core:$androidx_test_version"
    androidTestImplementation "androidx.test:runner:$androidx_test_version"

    def espresso_version = '3.3.0'
    testImplementation "androidx.test.espresso:espresso-core:$espresso_version"
    testImplementation "androidx.test.espresso:espresso-intents:$espresso_version"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_version"
    androidTestImplementation "androidx.test.espresso:espresso-web:$espresso_version"

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'androidx.test.ext:junit:1.1.2'
    testImplementation 'org.robolectric:robolectric:4.5.1'
    testImplementation 'org.mockito:mockito-inline:3.10.0'
    testImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0'
    testImplementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    androidTestImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'com.linkedin.dexmaker:dexmaker-mockito-inline:2.28.1'
    androidTestImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0'
}

task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier.set('sources')
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    from dokkaJavadoc.outputDirectory
    archiveClassifier.set('javadoc')
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release
                artifact sourceJar
                artifact javadocJar

                artifactId = 'mobilesdk'
                
                pom {
                    name = "$groupId:$artifactId"
                    description = 'A library for integrating Swedbank Pay payments into an Android application'
                    url = 'https://developer.swedbankpay.com/modules-sdks/mobile-sdk/'

                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            name = 'Swedbank Pay'
                            email = 'opensource@swedbankpay.com'
                            organization = 'Swedbank Pay'
                            organizationUrl = 'https://www.swedbankpay.com/'
                        }
                        developer {
                            name = 'Pertti Kr√∂ger'
                            email = 'pertti@qvik.fi'
                            organization = 'Qvik'
                            organizationUrl = "https://qvik.com/"
                        }
                    }

                    scm {
                        connection = 'scm:git:git://github.com/SwedbankPay/swedbank-pay-sdk-android.git'
                        developerConnection = 'scm:git:ssh://github.com:SwedbankPay/swedbank-pay-sdk-android.git'
                        url = 'https://github.com/SwedbankPay/swedbank-pay-sdk-android'
                    }
                }
            }
        }
    }

    signing {
        def signingKey = System.getenv('SIGNING_KEY')
        def signingKeyPassword = System.getenv('SIGNING_KEY_PASSWORD')
        if (signingKey && signingKeyPassword) {
            def signingKeyId = System.getenv('SIGNING_KEY_ID')
            if (signingKeyId?.isEmpty()) signingKeyId = null
            useInMemoryPgpKeys(signingKeyId, signingKey, signingKeyPassword)
            sign publishing.publications.release
        }
    }
}
