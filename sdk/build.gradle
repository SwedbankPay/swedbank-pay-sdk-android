import groovy.json.JsonSlurper

apply plugin: 'com.android.library'

apply plugin: 'kotlin-android'

apply plugin: 'org.jetbrains.dokka'

apply plugin: 'maven-publish'

apply plugin: 'signing'

apply plugin: 'org.ajoberstar.grgit'

apply plugin: 'com.jfrog.bintray'

// Support for Github Actions based CI: create named versions from Github releases
static def readGithubReleaseEvent() {
    def isRelease = System.getenv('GITHUB_EVENT_NAME') == 'release'
    def path = isRelease ? System.getenv('GITHUB_EVENT_PATH') : null
    def file = path ? new File(path) : null
    def text = file?.text
    return text ? new JsonSlurper().parseText(text) : null
}

static def getSnapshotVersionName(grgit) {
    return "${grgit.describe(tags: true)}${grgit.status().isClean() ? '' : '-dirty'}-SNAPSHOT"
}

def githubReleaseEvent = readGithubReleaseEvent()

def versionName = githubReleaseEvent?.release?.tag_name
        ?: (grgit ? getSnapshotVersionName(grgit) : 'local')

android {
    compileSdkVersion 29
    defaultConfig {
        minSdkVersion 21 // Required by okhttp (from version 3.13 onwards)
        targetSdkVersion 29
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'proguard-rules.pro'
        testInstrumentationRunnerArguments clearPackageData: 'true'
        buildConfigField('String', 'SDK_VERSION', "\"$versionName\"")
    }
    sourceSets {
        def testCommon = 'src/testCommon/java'
        test {
            java.srcDir testCommon
        }
        androidTest {
            java.srcDir testCommon
        }
    }
    testOptions {
        unitTests.includeAndroidResources = true
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
    dokka {
        configuration {
            sourceLink {
                path = 'sdk/src/main/java'
                url = 'https://github.com/SwedbankPay/swedbank-pay-sdk-android/blob/dev/sdk/src/main/java'
                lineSuffix = '#L'
            }
            externalDocumentationLink {
                url = new URL("https://developer.android.com/reference/")
                packageListUrl = new URL("https://developer.android.com/reference/androidx/package-list")
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    def coroutines_version = '1.4.2'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.core:core-ktx:1.3.2'

    def fragment_version = '1.3.0'
    implementation "androidx.fragment:fragment-ktx:$fragment_version"
    debugImplementation "androidx.fragment:fragment-testing:$fragment_version"

    def lifecycle_version = '2.3.0'
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"

    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'

    implementation 'com.google.android.gms:play-services-base:17.6.0'
    implementation 'com.google.android.gms:play-services-basement:17.6.0'

    def okhttp_version = '4.9.1'
    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"
    testImplementation "com.squareup.okhttp3:mockwebserver:$okhttp_version"
    androidTestImplementation "com.squareup.okhttp3:mockwebserver:$okhttp_version"

    implementation 'com.google.code.gson:gson:2.8.6'

    compileOnly 'joda-time:joda-time:2.10.10'
    compileOnly 'org.threeten:threetenbp:1.5.0'

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'androidx.test:core:1.3.0'
    testImplementation 'androidx.test.ext:junit:1.1.2'
    testImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    testImplementation 'androidx.test.espresso:espresso-intents:3.3.0'
    testImplementation 'org.robolectric:robolectric:4.5.1'
    testImplementation 'org.mockito:mockito-core:3.8.0'
    testImplementation 'org.mockito:mockito-inline:3.7.7'
    testImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0'
    testImplementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"


    androidTestImplementation 'androidx.test:core:1.3.0'
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-web:3.3.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'com.linkedin.dexmaker:dexmaker-mockito-inline:2.28.0'
    androidTestImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0'

    androidTestUtil 'androidx.test:orchestrator:1.3.0'
}

task dokkaGithub(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = 'gfm'
    outputDirectory ="$projectDir/dokka_github"
}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/javadoc"
}

task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier.set('sources')
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    from "$buildDir/javadoc"
    archiveClassifier.set('javadoc')
}



afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release
                artifact sourceJar
                artifact javadocJar

                // If you fork this library, you should use your own groupId and artifactId here
                groupId = 'com.swedbankpay.mobilesdk'
                artifactId = 'mobilesdk'
                version = versionName

                pom {
                    name = "$groupId:$artifactId"
                    description = 'A library for integrating Swedbank Pay payments into an Android application'
                    url = 'https://developer.swedbankpay.com/modules-sdks/mobile-sdk/'

                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            name = 'Pertti Kr√∂ger'
                            email = 'pertti@qvik.fi'
                            organization = 'Qvik'
                            organizationUrl = "https://qvik.com/"
                        }
                    }

                    scm {
                        connection = 'scm:git:git://github.com/SwedbankPay/swedbank-pay-sdk-android.git'
                        developerConnection = 'scm:git:ssh://github.com:SwedbankPay/swedbank-pay-sdk-android.git'
                        url = 'https://github.com/SwedbankPay/swedbank-pay-sdk-android'
                    }
                }
            }
        }

        repositories {
            maven {
                name = "Central"

                def snapshotUrl = 'https://oss.sonatype.org/content/repositories/snapshots'
                def stagingUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
                url = githubReleaseEvent ? stagingUrl : snapshotUrl

                credentials {
                    username = System.getenv('OSSRH_USER')
                    password = System.getenv('OSSRH_PASSWORD')
                }
            }
        }
    }

    signing {
        def signingKey = System.getenv('SIGNING_KEY')
        def signingKeyPassword = System.getenv('SIGNING_KEY_PASSWORD')
        if (signingKey && signingKeyPassword) {
            def signingKeyId = System.getenv('SIGNING_KEY_ID')
            if (signingKeyId.isEmpty()) signingKeyId = null
            useInMemoryPgpKeys(signingKeyId, signingKey, signingKeyPassword)
            sign publishing.publications.release
        }
    }
}
