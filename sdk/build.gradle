import groovy.json.JsonSlurper

apply plugin: 'com.android.library'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'org.jetbrains.dokka'

apply plugin: 'maven-publish'

apply plugin: 'com.jfrog.bintray'

android {
    compileSdkVersion 29
    defaultConfig {
        minSdkVersion 21 // Required by okhttp (from version 3.13 onwards)
        targetSdkVersion 29
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'proguard-rules.pro'
        testInstrumentationRunnerArguments clearPackageData: 'true'
    }
    sourceSets {
        def testCommon = 'src/testCommon/java'
        test {
            java.srcDir testCommon
        }
        androidTest {
            java.srcDir testCommon
        }
    }
    testOptions {
        unitTests.includeAndroidResources = true
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
    buildTypes {
        release {
            def version = readGithubReleaseEvent()?.release?.tag_name ?: 'snapshot'
            buildConfigField('String', 'SDK_VERSION', "\"$version\"")
        }
        debug {
            buildConfigField('String', 'SDK_VERSION', '"debug"')
        }
    }
    dokka {
        configuration {
            sourceLink {
                path = 'sdk/src/main/java'
                url = 'https://github.com/SwedbankPay/swedbank-pay-sdk-android/blob/dev/sdk/src/main/java'
                lineSuffix = '#L'
            }
            externalDocumentationLink {
                url = new URL("https://developer.android.com/reference/")
                packageListUrl = new URL("https://developer.android.com/reference/androidx/package-list")
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    def coroutines_version = '1.4.2'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.core:core-ktx:1.3.2'

    def fragment_version = '1.2.5'
    implementation "androidx.fragment:fragment-ktx:$fragment_version"
    debugImplementation "androidx.fragment:fragment-testing:$fragment_version"

    def lifecycle_version = '2.2.0'
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"

    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'

    implementation 'com.google.android.gms:play-services-base:17.5.0'
    implementation 'com.google.android.gms:play-services-basement:17.5.0'

    def okhttp_version = '4.9.0'
    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"
    testImplementation "com.squareup.okhttp3:mockwebserver:$okhttp_version"
    androidTestImplementation "com.squareup.okhttp3:mockwebserver:$okhttp_version"

    implementation 'com.google.code.gson:gson:2.8.6'

    api 'joda-time:joda-time:2.10.8'
    api 'org.threeten:threetenbp:1.5.0'

    testImplementation 'junit:junit:4.13.1'
    testImplementation 'androidx.test:core:1.2.0'
    testImplementation 'androidx.test.ext:junit:1.1.1'
    testImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    testImplementation 'androidx.test.espresso:espresso-intents:3.2.0'
    testImplementation 'org.robolectric:robolectric:4.4'
    testImplementation 'org.mockito:mockito-core:3.6.0'
    testImplementation 'org.mockito:mockito-inline:3.6.0'
    testImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0'
    testImplementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"


    androidTestImplementation 'androidx.test:core:1.2.0'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-web:3.2.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'com.linkedin.dexmaker:dexmaker-mockito-inline:2.28.0'
    androidTestImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0'

    androidTestUtil 'androidx.test:orchestrator:1.2.0'
}

task dokkaGithub(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = 'gfm'
    outputDirectory ="$projectDir/dokka_github"
}

task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier.set("sources")
}

static def readGithubReleaseEvent() {
    def isRelease = System.getenv('GITHUB_EVENT_NAME') == 'release'
    def path = isRelease ? System.getenv('GITHUB_EVENT_PATH') : null
    def file = path ? new File(path) : null
    def text = file?.text
    return text ? new JsonSlurper().parseText(text) : null
}

afterEvaluate {
    // Support for Github Actions based CI: create named versions from Github releases
    def githubRelease = readGithubReleaseEvent()?.release
    def githubTag = githubRelease?.tag_name

    publishing {
        publications {
            release(MavenPublication) {
                from components.release
                artifact(sourceJar)

                // If you fork this library, you should use your own groupId and artifactId here
                groupId = 'com.swedbankpay.mobilesdk'
                artifactId = 'mobilesdk'
                version = githubTag ?: 'local'
            }
        }
    }

    // The rest of this is specific to Bintray;
    // you may not need this part in a fork if you always build everything locally.
    // Environment variables are set by the Github Actions workflow.
    if (githubTag) {
        def bintrayUser = System.getenv('BINTRAY_USER')
        def bintrayKey = System.getenv('BINTRAY_KEY')
        def bintrayRepo = System.getenv('BINTRAY_REPO')
        def bintrayPackage = System.getenv('BINTRAY_PKG')
        def bintrayOrganization = System.getenv('BINTRAY_ORG')
        if (bintrayUser && bintrayKey && bintrayRepo && bintrayPackage) {
            def publishedAt = githubRelease.published_at
            def releaseDate = publishedAt ? Instant.parse(publishedAt).toDate() : null

            bintray {
                user = bintrayUser
                key = bintrayKey
                publications = ['release']
                publish = false
                pkg {
                    repo = bintrayRepo
                    name = bintrayPackage
                    userOrg = bintrayOrganization
                    version {
                        name = githubTag
                        desc = githubRelease.body
                        released = releaseDate
                        vcsTag = githubTag
                    }
                }
            }
        }
    }
}
