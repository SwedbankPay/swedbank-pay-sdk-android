import groovy.json.JsonSlurper

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.kotlin_version = '1.5.30'
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.0.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'org.jetbrains.dokka:dokka-gradle-plugin:1.5.0'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

plugins {
    id 'org.ajoberstar.grgit' version '4.1.0'
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
}

// Declare all dependency versions here so that they are consistent between subprojects.
ext.libs = [
        'kotlin-reflect': "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version",
        'kotlinx-coroutines-core': 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.1',
        'kotlinx-coroutines-android': 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.1',

        'androidx-appcompat': 'androidx.appcompat:appcompat:1.3.1',
        'androidx-core-ktx': 'androidx.core:core-ktx:1.6.0',
        'fragment-ktx': 'androidx.fragment:fragment-ktx:1.3.6',
        'fragment-testing': 'androidx.fragment:fragment-testing:1.3.6',
        'lifecycle-livedata-ktx': 'androidx.lifecycle:lifecycle-livedata-ktx:2.3.1',
        'lifecycle-viewmodel-ktx': 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1',
        constraintlayout: 'androidx.constraintlayout:constraintlayout:2.1.0',
        coordinatorlayout: 'androidx.coordinatorlayout:coordinatorlayout:1.1.0',
        swiperefreshlayout: 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0',

        'androidx-test-core': 'androidx.test:core:1.3.0',
        'androidx-test-runner': 'androidx.test:runner:1.3.0',

        'espresso-core': 'androidx.test.espresso:espresso-core:3.4.0',
        'espresso-intents': 'androidx.test.espresso:espresso-intents:3.3.0',
        'espresso-web': 'androidx.test.espresso:espresso-web:3.3.0',

        'androidx-test-junit': 'androidx.test.ext:junit:1.1.2',
        uiautomator: 'androidx.test.uiautomator:uiautomator:2.2.0',

        material: 'com.google.android.material:material:1.4.0',
        'play-services-base': 'com.google.android.gms:play-services-base:17.6.0',
        'play-services-basement': 'com.google.android.gms:play-services-basement:17.6.0',
        gson: 'com.google.code.gson:gson:2.8.8',

        junit: 'junit:junit:4.13.2',

        'joda-time': 'joda-time:joda-time:2.10.10',
        threetenbp: 'org.threeten:threetenbp:1.5.1',

        okhttp: 'com.squareup.okhttp3:okhttp:4.9.1',
        mockwebserver: 'com.squareup.okhttp3:mockwebserver:4.9.1',

        robolectric: 'org.robolectric:robolectric:4.6.1',
        'mockito-inline': 'org.mockito:mockito-inline:3.12.4',
        'mockito-kotlin': 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0',
        'dexmaker-mockito-inline': 'com.linkedin.dexmaker:dexmaker-mockito-inline:2.28.1'
]

// Support for Github Actions based CI: create named versions from Github releases
static def readGithubReleaseEvent() {
    def isRelease = System.getenv('GITHUB_EVENT_NAME') == 'release'
    def path = isRelease ? System.getenv('GITHUB_EVENT_PATH') : null
    def file = path ? new File(path) : null
    def text = file?.text
    return text ? new JsonSlurper().parseText(text) : null
}

static def getSnapshotVersionName(grgit) {
    return "${grgit.describe(tags: true)}${grgit.status().isClean() ? '' : '-dirty'}-SNAPSHOT"
}

def githubReleaseEvent = readGithubReleaseEvent()

// Remember to use your own group if you fork this library
group = 'com.swedbankpay.mobilesdk'
version = githubReleaseEvent?.release?.tag_name
        ?: (grgit ? getSnapshotVersionName(grgit) : 'local')

allprojects {
    group = rootProject.group
    version = rootProject.version
    repositories {
        google()
        mavenCentral()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

nexusPublishing {
    repositories {
        sonatype()
    }
}
