import groovy.json.JsonSlurper

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.kotlin_version = '1.5.30'
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.0.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'org.jetbrains.dokka:dokka-gradle-plugin:1.5.0'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

plugins {
    id 'org.ajoberstar.grgit' version '4.1.0'
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
}

// Versions for common dependencies.
// This should be changed to a version catalog when they become public.
// Ref: https://docs.gradle.org/current/userguide/platforms.html
ext.versions = [
        'kotlinx_coroutines': '1.5.1',

        'androidx_fragment': '1.3.6',
        'androidx_lifecycle': '2.3.1',

        // The AndroidX Test Library has a strange way of versioning its components.
        // These should only be changed as an atom, reflecting a single release of AndroidX Test.
        // Ref: https://developer.android.com/jetpack/androidx/releases/test
        // Note that androidx.fragment:fragment-testing has a strict AndroidX Test dependency,
        // so we cannot always update these to the newest stable release immediately.
        'androidx_test': [
                core: '1.3.0',
                espresso: '3.3.0',
                junit: '4.13.2'
        ],

        'gson': '2.8.8',
        'okhttp': '4.9.1',
        'junit': '4.13.2',
        'mockito': '3.12.4',
        'mockito_kotlin': '2.2.0',
        'robolectric': '4.6.1'
]

// Support for Github Actions based CI: create named versions from Github releases
static def readGithubReleaseEvent() {
    def isRelease = System.getenv('GITHUB_EVENT_NAME') == 'release'
    def path = isRelease ? System.getenv('GITHUB_EVENT_PATH') : null
    def file = path ? new File(path) : null
    def text = file?.text
    return text ? new JsonSlurper().parseText(text) : null
}

static def getSnapshotVersionName(grgit) {
    return "${grgit.describe(tags: true)}${grgit.status().isClean() ? '' : '-dirty'}-SNAPSHOT"
}

def githubReleaseEvent = readGithubReleaseEvent()

// Remember to use your own group if you fork this library
group = 'com.swedbankpay.mobilesdk'
version = githubReleaseEvent?.release?.tag_name
        ?: (grgit ? getSnapshotVersionName(grgit) : 'local')

allprojects {
    group = rootProject.group
    version = rootProject.version
    repositories {
        google()
        mavenCentral()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

nexusPublishing {
    repositories {
        sonatype()
    }
}
